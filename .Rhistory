cat("...")
start_time <- Sys.time()
# Attempt estimation
result <- try({
lppls_estimate(data, plot = FALSE, optimizer = optimizer)
}, silent = TRUE)
end_time <- Sys.time()
elapsed_time <- as.numeric(difftime(end_time, start_time, units = "secs"))
if (inherits(result, "try-error")) {
cat(" FAILED\n")
return(data.frame(
test_name = test_name,
test_id = test_id,
optimizer = optimizer,
trial = trial_id,
window_id = ifelse(is.null(window_info), NA, window_info$window_id),
start_date = ifelse(is.null(window_info), min(data$Date), window_info$start_date),
end_date = ifelse(is.null(window_info), max(data$Date), window_info$end_date),
n_obs = nrow(data),
success = FALSE,
time_seconds = elapsed_time,
objective_value = NA,
tc = NA, m = NA, w = NA, A = NA, B = NA, C1 = NA, C2 = NA,
rel_err = NA, oscillations = NA, damping = NA,
error_message = as.character(result),
stringsAsFactors = FALSE
))
} else {
cat(sprintf(" SUCCESS (%.2fs)\n", elapsed_time))
return(data.frame(
test_name = test_name,
test_id = test_id,
optimizer = optimizer,
trial = trial_id,
window_id = ifelse(is.null(window_info), NA, window_info$window_id),
start_date = ifelse(is.null(window_info), min(data$Date), window_info$start_date),
end_date = ifelse(is.null(window_info), max(data$Date), window_info$end_date),
n_obs = nrow(data),
success = TRUE,
time_seconds = elapsed_time,
objective_value = result$resid_sum_sq,
tc = result$tc, m = result$m, w = result$w,
A = result$A, B = result$B, C1 = result$C1, C2 = result$C2,
rel_err = result$rel_err,
oscillations = result$oscillations,
damping = result$damping,
error_message = "",
stringsAsFactors = FALSE
))
}
}
#' Test Confidence Indicators on Real Data
test_real_data_confidence <- function(data, optimizer, test_name) {
cat(sprintf("Testing %s confidence indicators on %s...", toupper(optimizer), test_name))
start_time <- Sys.time()
result <- try({
compute_lppls_confidence(
data,
clusters = config$confidence_test$clusters,
window_size = config$confidence_test$window_size,
min_window = config$confidence_test$min_window,
optimizer = optimizer,
progress = FALSE,
benchmark = TRUE,
save = FALSE
)
}, silent = TRUE)
end_time <- Sys.time()
elapsed_time <- as.numeric(difftime(end_time, start_time, units = "secs"))
if (inherits(result, "try-error")) {
cat(" FAILED\n")
return(data.frame(
test_name = test_name,
optimizer = optimizer,
test_type = "confidence",
n_obs = nrow(data),
success = FALSE,
total_time = elapsed_time,
avg_window_time = NA,
windows_processed = NA,
throughput = NA,
error_message = as.character(result),
stringsAsFactors = FALSE
))
} else {
benchmark_info <- attr(result, "benchmark")
if (!is.null(benchmark_info)) {
throughput <- benchmark_info$total_windows / (benchmark_info$total_time / 60)
cat(sprintf(" SUCCESS (%.2fs, %.2f win/min)\n", elapsed_time, throughput))
return(data.frame(
test_name = test_name,
optimizer = optimizer,
test_type = "confidence",
n_obs = nrow(data),
success = TRUE,
total_time = benchmark_info$total_time,
avg_window_time = benchmark_info$avg_window_time,
windows_processed = benchmark_info$total_windows,
throughput = throughput,
error_message = "",
stringsAsFactors = FALSE
))
} else {
cat(sprintf(" SUCCESS (%.2fs, no benchmark)\n", elapsed_time))
return(data.frame(
test_name = test_name,
optimizer = optimizer,
test_type = "confidence",
n_obs = nrow(data),
success = TRUE,
total_time = elapsed_time,
avg_window_time = NA,
windows_processed = NA,
throughput = NA,
error_message = "",
stringsAsFactors = FALSE
))
}
}
}
# ============================================================================
# ANALYSIS AND VISUALIZATION
# ============================================================================
#' Create S&P 500 Specific Performance Plots
create_sp500_plots <- function(estimation_results, confidence_results) {
plots <- list()
if (nrow(estimation_results[estimation_results$success, ]) > 0) {
successful_results <- estimation_results[estimation_results$success, ]
# 1. Performance by Market Period
plots$performance_by_period <- ggplot(successful_results,
aes(x = optimizer, y = time_seconds, fill = optimizer)) +
geom_boxplot(alpha = 0.7) +
facet_wrap(~test_name, scales = "free_y") +
labs(title = "LPPLS Estimation Performance by Market Period",
x = "Optimizer", y = "Time (seconds)",
subtitle = "Performance across different S&P 500 historical periods") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "bottom")
# 2. Solution Quality by Market Conditions
plots$quality_by_period <- ggplot(successful_results,
aes(x = test_name, y = rel_err, fill = optimizer)) +
geom_boxplot(alpha = 0.7) +
labs(title = "Solution Quality Across Market Conditions",
x = "Market Period", y = "Relative Error",
subtitle = "Lower values indicate better model fit") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "bottom") +
geom_hline(yintercept = 0.05, color = "red", linetype = "dashed", alpha = 0.7)
# 3. Parameter Recovery Analysis (for periods where we expect specific patterns)
bubble_periods <- successful_results[grepl("bubble|crash", successful_results$test_name, ignore.case = TRUE), ]
if (nrow(bubble_periods) > 0) {
plots$parameter_analysis <- ggplot(bubble_periods, aes(x = m, y = w, color = optimizer, shape = test_name)) +
geom_point(size = 3, alpha = 0.7) +
labs(title = "LPPLS Parameter Space for Bubble Periods",
x = "Power Law Exponent (m)", y = "Log-Periodic Frequency (ω)",
subtitle = "Parameter estimates during known bubble/crisis periods") +
theme_minimal() +
theme(legend.position = "bottom")
}
# 4. Time Series of Performance (if multiple windows)
if ("window_id" %in% names(successful_results) && any(!is.na(successful_results$window_id))) {
window_results <- successful_results[!is.na(successful_results$window_id), ]
if (nrow(window_results) > 0) {
plots$performance_over_time <- ggplot(window_results,
aes(x = start_date, y = time_seconds, color = optimizer)) +
geom_line(aes(group = optimizer), alpha = 0.7) +
geom_point(size = 2) +
facet_wrap(~test_name, scales = "free") +
labs(title = "Performance Evolution Over Time",
x = "Window Start Date", y = "Time (seconds)",
subtitle = "How optimizer performance varies across different time periods") +
theme_minimal() +
theme(legend.position = "bottom")
}
}
}
# 5. Confidence Indicator Throughput
if (nrow(confidence_results[confidence_results$success, ]) > 0) {
plots$confidence_throughput <- ggplot(confidence_results[confidence_results$success, ],
aes(x = optimizer, y = throughput, fill = optimizer)) +
geom_bar(stat = "identity", position = "dodge", alpha = 0.8) +
facet_wrap(~test_name) +
labs(title = "Confidence Indicator Throughput by Market Period",
x = "Optimizer", y = "Windows per Minute",
subtitle = "Real-world performance on S&P 500 data") +
theme_minimal() +
theme(legend.position = "bottom")
}
return(plots)
}
#' Generate S&P 500 Specific Analysis Report
generate_sp500_report <- function(estimation_results, confidence_results, sp500_data) {
cat("\n")
cat("=" %>% rep(80) %>% paste(collapse = ""), "\n")
cat("S&P 500 LPPLS OPTIMIZER BENCHMARK REPORT\n")
cat("=" %>% rep(80) %>% paste(collapse = ""), "\n\n")
# Data Summary
cat("DATA SUMMARY\n")
cat("-" %>% rep(40) %>% paste(collapse = ""), "\n")
cat("S&P 500 data period:", format(min(sp500_data$Date)), "to", format(max(sp500_data$Date)), "\n")
cat("Total observations:", nrow(sp500_data), "\n")
cat("Price range: $", round(min(sp500_data$Close), 2), "to $", round(max(sp500_data$Close), 2), "\n")
cat("Total return:", round((tail(sp500_data$Close, 1) / head(sp500_data$Close, 1) - 1) * 100, 1), "%\n\n")
# Overall Performance Summary
if (nrow(estimation_results) > 0) {
cat("ESTIMATION PERFORMANCE SUMMARY\n")
cat("-" %>% rep(40) %>% paste(collapse = ""), "\n")
summary_stats <- estimation_results %>%
group_by(optimizer) %>%
summarise(
success_rate = mean(success) * 100,
avg_time = mean(time_seconds, na.rm = TRUE),
median_time = median(time_seconds, na.rm = TRUE),
avg_rel_err = mean(rel_err, na.rm = TRUE),
total_tests = n(),
.groups = 'drop'
) %>%
arrange(desc(success_rate), avg_time)
for (i in 1:nrow(summary_stats)) {
opt <- summary_stats$optimizer[i]
cat(sprintf("%s:\n", toupper(opt)))
cat(sprintf("  Success Rate: %.1f%% (%d/%d tests)\n",
summary_stats$success_rate[i],
sum(estimation_results$optimizer == opt & estimation_results$success),
sum(estimation_results$optimizer == opt)))
cat(sprintf("  Average Time: %.2f seconds\n", summary_stats$avg_time[i]))
cat(sprintf("  Median Time: %.2f seconds\n", summary_stats$median_time[i]))
cat(sprintf("  Average Quality: %.4f rel_err\n", summary_stats$avg_rel_err[i]))
cat("\n")
}
}
# Performance by Market Period
if (nrow(estimation_results) > 0) {
cat("PERFORMANCE BY MARKET PERIOD\n")
cat("-" %>% rep(40) %>% paste(collapse = ""), "\n")
period_stats <- estimation_results %>%
group_by(test_name, optimizer) %>%
summarise(
success_rate = mean(success) * 100,
avg_time = mean(time_seconds, na.rm = TRUE),
avg_quality = mean(rel_err, na.rm = TRUE),
.groups = 'drop'
)
for (period in unique(period_stats$test_name)) {
cat(sprintf("\n%s:\n", period))
period_data <- period_stats[period_stats$test_name == period, ]
for (i in 1:nrow(period_data)) {
cat(sprintf("  %s: %.0f%% success, %.2fs avg, %.4f rel_err\n",
toupper(period_data$optimizer[i]),
period_data$success_rate[i],
period_data$avg_time[i],
period_data$avg_quality[i]))
}
}
}
# Confidence Indicator Results
if (nrow(confidence_results) > 0) {
cat("\n\nCONFIDENCE INDICATOR PERFORMANCE\n")
cat("-" %>% rep(40) %>% paste(collapse = ""), "\n")
conf_summary <- confidence_results %>%
group_by(optimizer) %>%
summarise(
avg_throughput = mean(throughput, na.rm = TRUE),
avg_time = mean(total_time, na.rm = TRUE),
.groups = 'drop'
) %>%
arrange(desc(avg_throughput))
for (i in 1:nrow(conf_summary)) {
cat(sprintf("%s: %.2f windows/min, %.2f sec total\n",
toupper(conf_summary$optimizer[i]),
conf_summary$avg_throughput[i],
conf_summary$avg_time[i]))
}
}
# Best Practices Recommendations
cat("\n\nREAL-WORLD RECOMMENDATIONS\n")
cat("-" %>% rep(40) %>% paste(collapse = ""), "\n")
if (nrow(estimation_results[estimation_results$success, ]) > 0) {
successful_results <- estimation_results[estimation_results$success, ]
fastest <- successful_results %>%
group_by(optimizer) %>%
summarise(avg_time = mean(time_seconds, na.rm = TRUE), .groups = 'drop') %>%
slice_min(avg_time, n = 1)
most_reliable <- estimation_results %>%
group_by(optimizer) %>%
summarise(success_rate = mean(success), .groups = 'drop') %>%
slice_max(success_rate, n = 1)
best_quality <- successful_results %>%
group_by(optimizer) %>%
summarise(avg_quality = mean(rel_err, na.rm = TRUE), .groups = 'drop') %>%
slice_min(avg_quality, n = 1)
cat("Based on S&P 500 analysis:\n")
cat(sprintf("• Fastest: %s (%.2f sec average)\n",
toupper(fastest$optimizer), fastest$avg_time))
cat(sprintf("• Most Reliable: %s (%.1f%% success rate)\n",
toupper(most_reliable$optimizer), most_reliable$success_rate * 100))
cat(sprintf("• Best Quality: %s (%.4f avg rel_err)\n",
toupper(best_quality$optimizer), best_quality$avg_quality))
cat("\nFor production S&P 500 analysis:\n")
cat("• Daily monitoring: Use fastest optimizer\n")
cat("• Research analysis: Use best quality optimizer\n")
cat("• Automated systems: Use most reliable optimizer\n")
}
cat("\n")
}
# ============================================================================
# MAIN EXECUTION
# ============================================================================
cat("Starting S&P 500 benchmark...\n\n")
# Load S&P 500 data
sp500_data <- load_sp500_data(config$sp500_file, config$alternative_paths)
# Initialize results storage
estimation_results <- data.frame()
confidence_results <- data.frame()
# Test 1: Historical Period Analysis
cat("=" %>% rep(60) %>% paste(collapse = ""), "\n")
cat("TESTING ACROSS HISTORICAL PERIODS\n")
cat("=" %>% rep(60) %>% paste(collapse = ""), "\n\n")
for (scenario_name in names(config$scenarios)) {
scenario <- config$scenarios[[scenario_name]]
cat(sprintf("Testing scenario: %s\n", scenario$name))
cat(sprintf("Period: %s to %s\n", scenario$start_date, scenario$end_date))
cat(paste(rep("-", 50), collapse = ""), "\n")
# Extract period data
period_data <- extract_time_period(sp500_data, scenario$start_date, scenario$end_date)
if (is.null(period_data)) {
cat("Insufficient data for this period, skipping...\n\n")
next
}
cat("Data points:", nrow(period_data), "\n")
# Test each optimizer
for (optimizer in config$optimizers) {
cat(sprintf("\nTesting %s optimizer:\n", toupper(optimizer)))
# Multiple trials for statistical reliability
for (trial in 1:config$n_trials) {
trial_result <- test_real_data_estimation(period_data, optimizer, trial, scenario$name)
estimation_results <- rbind(estimation_results, trial_result)
}
# Single confidence test per period
conf_result <- test_real_data_confidence(period_data, optimizer, scenario$name)
confidence_results <- rbind(confidence_results, conf_result)
}
cat("\n")
}
# Test 2: Sliding Window Analysis (if enough data)
if (nrow(sp500_data) > 2000) {  # Only if we have sufficient data
cat("=" %>% rep(60) %>% paste(collapse = ""), "\n")
cat("TESTING SLIDING WINDOWS\n")
cat("=" %>% rep(60) %>% paste(collapse = ""), "\n\n")
for (window_name in names(config$window_tests)) {
window_config <- config$window_tests[[window_name]]
cat(sprintf("Testing %s (%d days)\n", window_config$name, window_config$days))
cat(paste(rep("-", 40), collapse = ""), "\n")
# Create sliding windows
windows <- create_sliding_windows(sp500_data, window_config$days, n_windows = 3)
if (length(windows) == 0) {
cat("Cannot create windows of this size, skipping...\n\n")
next
}
cat("Created", length(windows), "windows\n")
# Test each window
for (window_info in windows) {
cat(sprintf("\nWindow %d: %s to %s (%d obs)\n",
window_info$window_id,
format(window_info$start_date),
format(window_info$end_date),
window_info$n_obs))
for (optimizer in config$optimizers) {
for (trial in 1:2) {  # Fewer trials for window analysis
trial_result <- test_real_data_estimation(
window_info$data, optimizer, trial, window_config$name, window_info
)
estimation_results <- rbind(estimation_results, trial_result)
}
}
}
cat("\n")
}
}
# Analysis and Reporting
cat("Generating analysis and reports...\n")
# Create visualizations
if (config$create_plots && requireNamespace("ggplot2", quietly = TRUE)) {
plots <- create_sp500_plots(estimation_results, confidence_results)
}
# Generate comprehensive report
generate_sp500_report(estimation_results, confidence_results, sp500_data)
# Save results
if (config$save_results) {
cat("Saving results to", config$output_folder, "...\n")
# Save raw results
write.csv(estimation_results, file.path(config$output_folder, "sp500_estimation_results.csv"), row.names = FALSE)
write.csv(confidence_results, file.path(config$output_folder, "sp500_confidence_results.csv"), row.names = FALSE)
# Save data summary
sp500_summary <- data.frame(
metric = c("start_date", "end_date", "total_observations", "min_price", "max_price", "total_return_pct"),
value = c(
format(min(sp500_data$Date)),
format(max(sp500_data$Date)),
nrow(sp500_data),
round(min(sp500_data$Close), 2),
round(max(sp500_data$Close), 2),
round((tail(sp500_data$Close, 1) / head(sp500_data$Close, 1) - 1) * 100, 2)
),
stringsAsFactors = FALSE
)
write.csv(sp500_summary, file.path(config$output_folder, "sp500_data_summary.csv"), row.names = FALSE)
# Save plots
if (exists("plots") && config$create_plots) {
for (plot_name in names(plots)) {
if (!is.null(plots[[plot_name]])) {
ggsave(
filename = file.path(config$output_folder, paste0("sp500_", plot_name, ".png")),
plot = plots[[plot_name]],
width = 14, height = 10, dpi = 300
)
}
}
}
# Save configuration and session info
session_info <- list(
config = config,
timestamp = Sys.time(),
R_version = R.version.string,
data_summary = sp500_summary,
packages = sapply(required_packages, function(x) as.character(packageVersion(x)))
)
saveRDS(session_info, file.path(config$output_folder, "sp500_session_info.rds"))
cat("S&P 500 benchmark results saved successfully!\n")
}
# Display plots if available
if (exists("plots") && config$create_plots && requireNamespace("ggplot2", quietly = TRUE)) {
cat("\nDisplaying S&P 500 performance plots...\n")
for (plot_name in names(plots)) {
if (!is.null(plots[[plot_name]])) {
print(plots[[plot_name]])
if (interactive()) {
readline(prompt = "Press [Enter] to continue to next plot...")
}
}
}
}
if (config$save_results) {
cat("📁 Results saved to:", config$output_folder, "\n")
cat("📊 Files created:\n")
cat("   • sp500_estimation_results.csv - Raw estimation performance data\n")
cat("   • sp500_confidence_results.csv - Confidence indicator performance\n")
cat("   • sp500_data_summary.csv - S&P 500 dataset information\n")
if (config$create_plots) {
cat("   • sp500_*.png - Performance visualization plots\n")
}
cat("   • sp500_session_info.rds - Session and configuration info\n")
}
cat("\n🎯 Real-world S&P 500 performance analysis complete!\n")
cat("💡 Key insights:\n")
cat("   • Performance varies significantly across market conditions\n")
cat("   • Crisis periods may favor more robust optimizers\n")
cat("   • Bull markets may allow faster optimizers to excel\n")
cat("   • Use these results to choose optimal settings for your use case\n")
# ============================================================================
# ADDITIONAL ANALYSIS FUNCTIONS (BONUS)
# ============================================================================
#' Quick Performance Summary
#' Call this function to get a quick overview without running full benchmark
quick_sp500_summary <- function(sp500_file_path) {
cat("Quick S&P 500 Dataset Analysis\n")
cat("==============================\n")
# Load and analyze data
data <- try({
raw_data <- read.csv(sp500_file_path, stringsAsFactors = FALSE)
prepare_lppls_data(raw_data)
}, silent = TRUE)
if (inherits(data, "try-error")) {
cat("Error loading data from:", sp500_file_path, "\n")
return(invisible(NULL))
}
# Basic statistics
cat("Data period:", format(min(data$Date)), "to", format(max(data$Date)), "\n")
cat("Total observations:", nrow(data), "\n")
cat("Years of data:", round(as.numeric(max(data$Date) - min(data$Date)) / 365.25, 1), "\n")
cat("Price range: $", round(min(data$Close), 2), "to $", round(max(data$Close), 2), "\n")
# Calculate some basic metrics for LPPLS suitability
returns <- diff(log(data$Close))
volatility <- sd(returns) * sqrt(252) * 100
cat("Annualized volatility:", round(volatility, 1), "%\n")
# Identify potential interesting periods for testing
large_moves <- which(abs(returns) > 0.05)  # Days with >5% moves
if (length(large_moves) > 0) {
cat("Large movement days (>5%):", length(large_moves), "\n")
cat("This dataset contains sufficient volatility for LPPLS testing\n")
}
# Recommendations
cat("\nRecommendations for benchmarking:\n")
if (nrow(data) > 5000) {
cat("✅ Large dataset - suitable for comprehensive testing\n")
} else if (nrow(data) > 1000) {
cat("✅ Medium dataset - suitable for period-specific testing\n")
} else {
cat("⚠️  Small dataset - limited testing options\n")
}
if (volatility > 15) {
cat("✅ High volatility - excellent for LPPLS algorithm stress testing\n")
} else {
cat("ℹ️  Moderate volatility - good for standard performance testing\n")
}
cat("\n")
return(invisible(data))
}
#' Example usage for quick summary:
quick_sp500_summary("./data/SP500.csv")

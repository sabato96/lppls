library(devtools)
roxygen2::roxygenise()
devtools::install()
library(LPPLS)
# 1. Load and check your data
sp500_data <- read.csv("~/lppls-r/data/SP500.csv")
head(sp500_data)
cat("Data from", min(sp500_data$Date), "to", max(sp500_data$Date), "\n")
cat("Total observations:", nrow(sp500_data), "\n")
# 2. Prepare data (will automatically use "Close" column)
prepared_data <- prepare_lppls_data(sp500_data)
head(prepared_data)
# 3. Test on recent data (last 1000 observations)
recent_data <- tail(prepared_data, 1000)
fit_recent <- lppls_estimate(recent_data, plot = TRUE)
print(fit_recent)
# 4. Test on Black Monday period (if you want the same subset as your original code)
# You'll need to find the right row numbers for your timeframe
# Let's say you want data from 2020 onwards:
recent_subset <- prepared_data[prepared_data$Date >= "2020-01-01", ]
if(nrow(recent_subset) > 40) {
fit_2020 <- lppls_estimate(recent_subset, plot = TRUE)
print(fit_2020)
}
# 5. Calculate confidence indicators (start small for testing)
confidence <- compute_lppls_confidence(
recent_data,       # Use recent data for faster computation
clusters = 12,      # Start with 2 cores
window_size = 10,   # Small window for quick test
min_window = 1
)
# 5. Calculate confidence indicators (start small for testing)
confidence <- compute_lppls_confidence(
recent_data,       # Use recent data for faster computation
clusters = 20,      # Start with 2 cores
window_size = 10,   # Small window for quick test
min_window = 1
)
warnings()
parallel::detectCores()
gc()
# 5. Calculate confidence indicators (start small for testing)
confidence <- compute_lppls_confidence(
recent_data,       # Use recent data for faster computation
clusters = 16,      # Start with 2 cores
window_size = 1,   # Small window for quick test
min_window = 1
)
library(LPPLS)
# 1. Load and check your data
sp500_data <- read.csv("~/lppls-r/data/SP500.csv")
head(sp500_data)
cat("Data from", min(sp500_data$Date), "to", max(sp500_data$Date), "\n")
cat("Total observations:", nrow(sp500_data), "\n")
# 2. Prepare data (will automatically use "Close" column)
prepared_data <- prepare_lppls_data(sp500_data)
head(prepared_data)
# 3. Test on recent data (last 1000 observations)
recent_data <- tail(prepared_data, 1000)
fit_recent <- lppls_estimate(recent_data, plot = TRUE)
print(fit_recent)
# 4. Test on Black Monday period (if you want the same subset as your original code)
# You'll need to find the right row numbers for your timeframe
# Let's say you want data from 2020 onwards:
recent_subset <- prepared_data[prepared_data$Date >= "2020-01-01", ]
if(nrow(recent_subset) > 40) {
fit_2020 <- lppls_estimate(recent_subset, plot = TRUE)
print(fit_2020)
}
# 5. Calculate confidence indicators (start small for testing)
confidence <- compute_lppls_confidence(
recent_data,       # Use recent data for faster computation
clusters = 16,      # Start with 2 cores
window_size = 1,   # Small window for quick test
min_window = 1
)
# 6. Plot confidence indicators
plot_confidence_indicators(confidence, scale = "S", title = "S&P 500 Confidence Indicators")
View(confidence)
library(LPPLS)
# 1. Load and check your data
sp500_data <- read.csv("~/lppls-r/data/SP500.csv")
head(sp500_data)
cat("Data from", min(sp500_data$Date), "to", max(sp500_data$Date), "\n")
cat("Total observations:", nrow(sp500_data), "\n")
# 2. Prepare data (will automatically use "Close" column)
prepared_data <- prepare_lppls_data(sp500_data)
head(prepared_data)
# 3. Test on recent data (last 1000 observations)
recent_data <- tail(prepared_data, 1000)
fit_recent <- lppls_estimate(recent_data, plot = TRUE)
print(fit_recent)
# 4. Test on Black Monday period (if you want the same subset as your original code)
# You'll need to find the right row numbers for your timeframe
# Let's say you want data from 2020 onwards:
recent_subset <- prepared_data[prepared_data$Date >= "2020-01-01", ]
if(nrow(recent_subset) > 40) {
fit_2020 <- lppls_estimate(recent_subset, plot = TRUE)
print(fit_2020)
}
# 5. Calculate confidence indicators (start small for testing)
confidence <- compute_lppls_confidence(
recent_data,       # Use recent data for faster computation
clusters = 16,      # Start with 2 cores
window_size = 5,   # Small window for quick test
min_window = 1
)
# 6. Plot confidence indicators
plot_confidence_indicators(confidence, scale = "S", title = "S&P 500 Confidence Indicators")
View(confidence)
roxygen2::roxygenise()
devtools::install()
library(LPPLS)
# 1. Load and check your data
sp500_data <- read.csv("~/lppls-r/data/SP500.csv")
head(sp500_data)
cat("Data from", min(sp500_data$Date), "to", max(sp500_data$Date), "\n")
cat("Total observations:", nrow(sp500_data), "\n")
# 2. Prepare data (will automatically use "Close" column)
prepared_data <- prepare_lppls_data(sp500_data)
head(prepared_data)
# 3. Test on recent data (last 1000 observations)
recent_data <- tail(prepared_data, 1000)
fit_recent <- lppls_estimate(recent_data, plot = TRUE)
print(fit_recent)
roxygen2::roxygenise()
devtools::install()
roxygen2::roxygenise()
devtools::install()
library(LPPLS)
# 1. Load and check your data
sp500_data <- read.csv("~/lppls-r/data/SP500.csv")
head(sp500_data)
cat("Data from", min(sp500_data$Date), "to", max(sp500_data$Date), "\n")
cat("Total observations:", nrow(sp500_data), "\n")
# 2. Prepare data (will automatically use "Close" column)
prepared_data <- prepare_lppls_data(sp500_data)
head(prepared_data)
# 3. Test on recent data (last 1000 observations)
recent_data <- tail(prepared_data, 1000)
fit_recent <- lppls_estimate(recent_data, plot = TRUE)
print(fit_recent)
daily_ds_confidence <- compute_ds_lppls_confidence(
data = recent_data,
recent_days = 1,        # Last 30 trading days
clusters = 12,            # Parallel processing
progress = TRUE,
benchmark = TRUE,
save = TRUE,             # Save intermediate results
folder = "./ds_results/"
)
library(ggplot2)
library(tidyr)
# Reshape data for plotting
plot_data <- daily_ds_confidence %>%
select(Date, P.SS_EW, P.S_EW, P.M_EW, P.L_EW) %>%
pivot_longer(cols = -Date, names_to = "Scale", values_to = "Confidence") %>%
mutate(Scale = recode(Scale,
"P.SS_EW" = "Super-Short",
"P.S_EW" = "Short",
"P.M_EW" = "Medium",
"P.L_EW" = "Long"
))
library(dplyr)
# Reshape data for plotting
plot_data <- daily_ds_confidence %>%
select(Date, P.SS_EW, P.S_EW, P.M_EW, P.L_EW) %>%
pivot_longer(cols = -Date, names_to = "Scale", values_to = "Confidence") %>%
mutate(Scale = recode(Scale,
"P.SS_EW" = "Super-Short",
"P.S_EW" = "Short",
"P.M_EW" = "Medium",
"P.L_EW" = "Long"
))
# Plot DS LPPLS Confidence indicators
ggplot(plot_data, aes(x = Date, y = Confidence, color = Scale)) +
geom_line(size = 1.2) +
geom_hline(yintercept = 0.5, linetype = "dashed", alpha = 0.7) +
labs(
title = "DS LPPLS Confidence Indicators (Early Warning)",
subtitle = "Following original thesis methodology",
x = "Date",
y = "Confidence Level",
color = "Time Scale"
) +
scale_y_continuous(limits = c(0, 1), labels = scales::percent) +
theme_minimal() +
theme(legend.position = "bottom")
library(LPPLS)
# 1. Load and check your data
sp500_data <- read.csv("~/lppls-r/data/SP500.csv")
head(sp500_data)
cat("Data from", min(sp500_data$Date), "to", max(sp500_data$Date), "\n")
cat("Total observations:", nrow(sp500_data), "\n")
# 2. Prepare data (will automatically use "Close" column)
prepared_data <- prepare_lppls_data(sp500_data)
head(prepared_data)
# 3. Test on recent data (last 1000 observations)
recent_data <- tail(prepared_data, 1500)
fit_recent <- lppls_estimate(recent_data, plot = TRUE)
print(fit_recent)
daily_ds_confidence <- compute_ds_lppls_confidence(
data = recent_data,
recent_days = 30,        # Last 30 trading days
clusters = 12,            # Parallel processing
progress = TRUE,
benchmark = TRUE,
save = TRUE,             # Save intermediate results
folder = "~/lppls-r/ds_results/"
)
# 1. Load and check your data
sp500_data <- read.csv("~/lppls-r/data/SP500.csv")
head(sp500_data)
cat("Data from", min(sp500_data$Date), "to", max(sp500_data$Date), "\n")
cat("Total observations:", nrow(sp500_data), "\n")
# 2. Prepare data (will automatically use "Close" column)
prepared_data <- prepare_lppls_data(sp500_data)
head(prepared_data)
# 3. Test on recent data (last 1000 observations)
recent_data <- tail(prepared_data, 1800)
fit_recent <- lppls_estimate(recent_data, plot = TRUE)
print(fit_recent)
daily_ds_confidence <- compute_ds_lppls_confidence(
data = recent_data,
recent_days = 30,        # Last 30 trading days
clusters = 12,            # Parallel processing
progress = TRUE,
benchmark = TRUE,
save = TRUE,             # Save intermediate results
folder = "~/lppls-r/ds_results/"
)
